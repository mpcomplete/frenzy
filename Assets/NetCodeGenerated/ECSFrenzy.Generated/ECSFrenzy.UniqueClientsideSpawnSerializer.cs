//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using ECSFrenzy;

namespace ECSFrenzy.Generated
{
    [BurstCompile]
    public struct ECSFrenzyUniqueClientsideSpawnGhostComponentSerializer
    {
        static ECSFrenzyUniqueClientsideSpawnGhostComponentSerializer()
        {
            State = new GhostComponentSerializer.State
            {
                GhostFieldsHash = 11266163746584454747,
                ExcludeFromComponentCollectionHash = 0,
                ComponentType = ComponentType.ReadWrite<ECSFrenzy.UniqueClientsideSpawn>(),
                ComponentSize = UnsafeUtility.SizeOf<ECSFrenzy.UniqueClientsideSpawn>(),
                SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                ChangeMaskBits = ChangeMaskBits,
                SendMask = GhostComponentSerializer.SendMask.Predicted,
                SendForChildEntities = 1,
                CopyToSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                CopyFromSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                RestoreFromBackup =
                    new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                CalculateChangeMask =
                    new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                        CalculateChangeMask),
                Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                #endif
            };
            #if UNITY_EDITOR || DEVELOPMENT_BUILD
            State.NumPredictionErrorNames = GetPredictionErrorNames(ref State.PredictionErrorNames);
            #endif
        }
        public static readonly GhostComponentSerializer.State State;
        public struct Snapshot
        {
            public int OwnerEntity;
            public uint OwnerEntitySpawnTick;
            public uint SpawnTick;
            public uint Identifier;
        }
        public const int ChangeMaskBits = 3;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.OwnerEntity = 0;
                snapshot.OwnerEntitySpawnTick = 0;
                if (serializerState.GhostFromEntity.HasComponent(component.OwnerEntity))
                {
                    var ghostComponent = serializerState.GhostFromEntity[component.OwnerEntity];
                    snapshot.OwnerEntity = ghostComponent.ghostId;
                    snapshot.OwnerEntitySpawnTick = ghostComponent.spawnTick;
                }
                snapshot.SpawnTick = (uint)component.SpawnTick;
                snapshot.Identifier = (uint)component.Identifier;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;
                ref var component = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(componentData, componentStride*i);
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                component.OwnerEntity = Entity.Null;
                if (snapshotBefore.OwnerEntity != 0)
                {
                    if (deserializerState.GhostMap.TryGetValue(new SpawnedGhost{ghostId = snapshotBefore.OwnerEntity, spawnTick = snapshotBefore.OwnerEntitySpawnTick}, out var ghostEnt))
                        component.OwnerEntity = ghostEnt;
                }
                component.SpawnTick = (uint) snapshotBefore.SpawnTick;
                component.Identifier = (uint) snapshotBefore.Identifier;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(backupData, 0);
            component.OwnerEntity = backup.OwnerEntity;
            component.SpawnTick = backup.SpawnTick;
            component.Identifier = backup.Identifier;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.OwnerEntity = predictor.PredictInt(snapshot.OwnerEntity, baseline1.OwnerEntity, baseline2.OwnerEntity);
            snapshot.OwnerEntitySpawnTick = (uint)predictor.PredictInt((int)snapshot.OwnerEntitySpawnTick, (int)baseline1.OwnerEntitySpawnTick, (int)baseline2.OwnerEntity);
            snapshot.SpawnTick = (uint)predictor.PredictInt((int)snapshot.SpawnTick, (int)baseline1.SpawnTick, (int)baseline2.SpawnTick);
            snapshot.Identifier = (uint)predictor.PredictInt((int)snapshot.Identifier, (int)baseline1.Identifier, (int)baseline2.Identifier);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.OwnerEntity != baseline.OwnerEntity || snapshot.OwnerEntitySpawnTick != baseline.OwnerEntitySpawnTick) ? 1u : 0;
            changeMask |= (snapshot.SpawnTick != baseline.SpawnTick) ? (1u<<1) : 0;
            changeMask |= (snapshot.Identifier != baseline.Identifier) ? (1u<<2) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 3);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.OwnerEntity, baseline.OwnerEntity, compressionModel);
                writer.WritePackedUIntDelta(snapshot.OwnerEntitySpawnTick, baseline.OwnerEntitySpawnTick, compressionModel);
            }
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedUIntDelta(snapshot.SpawnTick, baseline.SpawnTick, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedUIntDelta(snapshot.Identifier, baseline.Identifier, compressionModel);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                snapshot.OwnerEntity = reader.ReadPackedIntDelta(baseline.OwnerEntity, compressionModel);
                snapshot.OwnerEntitySpawnTick = reader.ReadPackedUIntDelta(baseline.OwnerEntitySpawnTick, compressionModel);
            }
            else
            {
                snapshot.OwnerEntity = baseline.OwnerEntity;
                snapshot.OwnerEntitySpawnTick = baseline.OwnerEntitySpawnTick;
            }
            if ((changeMask & (1 << 1)) != 0)
                snapshot.SpawnTick = reader.ReadPackedUIntDelta(baseline.SpawnTick, compressionModel);
            else
                snapshot.SpawnTick = baseline.SpawnTick;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Identifier = reader.ReadPackedUIntDelta(baseline.Identifier, compressionModel);
            else
                snapshot.Identifier = baseline.Identifier;
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<ECSFrenzy.UniqueClientsideSpawn>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.SpawnTick > backup.SpawnTick) ?
                (component.SpawnTick - backup.SpawnTick) :
                (backup.SpawnTick - component.SpawnTick));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Identifier > backup.Identifier) ?
                (component.Identifier - backup.Identifier) :
                (backup.Identifier - component.Identifier));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("SpawnTick"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Identifier"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}