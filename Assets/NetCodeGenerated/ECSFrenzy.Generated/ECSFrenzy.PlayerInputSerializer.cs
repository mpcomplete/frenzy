//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using ECSFrenzy;


namespace ECSFrenzy.Generated
{
    public struct ECSFrenzyPlayerInputSerializer : ICommandDataSerializer<ECSFrenzy.PlayerInput>
    {
        public void Serialize(ref DataStreamWriter writer, in ECSFrenzy.PlayerInput data)
        {
            writer.WriteFloat(data.horizontal);
            writer.WriteFloat(data.vertical);
            writer.WriteUInt(data.didFire);
            writer.WriteUInt(data.didBanner);
            writer.WriteUInt(data.isChanneling);
        }

        public void Deserialize(ref DataStreamReader reader, ref ECSFrenzy.PlayerInput data)
        {
            data.horizontal = reader.ReadFloat();
            data.vertical = reader.ReadFloat();
            data.didFire = (byte) reader.ReadUInt();
            data.didBanner = (byte) reader.ReadUInt();
            data.isChanneling = (byte) reader.ReadUInt();
        }

        public void Serialize(ref DataStreamWriter writer, in ECSFrenzy.PlayerInput data, in ECSFrenzy.PlayerInput baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.horizontal, baseline.horizontal, compressionModel);
            writer.WritePackedFloatDelta(data.vertical, baseline.vertical, compressionModel);
            writer.WritePackedUIntDelta(data.didFire, baseline.didFire, compressionModel);
            writer.WritePackedUIntDelta(data.didBanner, baseline.didBanner, compressionModel);
            writer.WritePackedUIntDelta(data.isChanneling, baseline.isChanneling, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref ECSFrenzy.PlayerInput data, in ECSFrenzy.PlayerInput baseline, NetworkCompressionModel compressionModel)
        {
            data.horizontal = reader.ReadPackedFloatDelta(baseline.horizontal, compressionModel);
            data.vertical = reader.ReadPackedFloatDelta(baseline.vertical, compressionModel);
            data.didFire = (byte) reader.ReadPackedUIntDelta(baseline.didFire, compressionModel);
            data.didBanner = (byte) reader.ReadPackedUIntDelta(baseline.didBanner, compressionModel);
            data.isChanneling = (byte) reader.ReadPackedUIntDelta(baseline.isChanneling, compressionModel);
        }
    }
    public class ECSFrenzyPlayerInputSendCommandSystem : CommandSendSystem<ECSFrenzyPlayerInputSerializer, ECSFrenzy.PlayerInput>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class ECSFrenzyPlayerInputReceiveCommandSystem : CommandReceiveSystem<ECSFrenzyPlayerInputSerializer, ECSFrenzy.PlayerInput>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
